import pandas as pd
import numpy as np

# Data: columns must match the order below
# [CONCENTRIC_IMPULSE_Trial_Ns, ECCENTRIC_BRAKING_RFD_Trial_N_s, PEAK_CONCENTRIC_FORCE_Trial_N, BODYMASS_RELATIVE_TAKEOFF_POWER_Trial_W_kg, RSI_MODIFIED_Trial_RSI_mod, ECCENTRIC_BRAKING_IMPULSE_Trial_Ns, cmj_composite_score]
data = [
    [298.445803889541, 6226.7441860389008, 2468.5610184372254, 57.54, 52.137102330160808, 60.997778126479957, 86.204962994225383],
    [296.63935339160651, 7363.9240506239121, 2613.1930348258707, 56.898, 51.885232270594813, 75.022913113066878, 63.472090823042365],
    [296.10365536426025, 8521.5827338176732, 2607.6214149139578, 56.838, 54.795269790594631, 88.94086201203109, 67.192344072063648],
    [301.79400425767159, 8762.9629629522533, 2556.436553030303, 59.198, 58.381573537930358, 97.520923903301, 65.115923297050088],
    [294.37350094698161, 7052.6315789512773, 2611.3480345158196, 54.683, 46.31021583132825, 72.988856060768867, 69.745069126255856],
    [300.96591941504846, 9539.4736842158127, 2738.9732965009207, 59.553, 56.721690765204016, 95.809639430156821, 71.2980837488926],
    [288.01333110339033, 9240.6015037481047, 2671.184383819379, 54.199, 51.944761365804219, 79.2675156670517, 76.234097499984983],
    [292.58152354009769, 9394.5312499968622, 2686.8359375, 58.578, 55.389717254920456, 80.994923840027084, 68.37074116657169],
    [295.98681715543381, 8425.78125000467, 2558.6131528046421, 57.602, 55.743613706635763, 96.248694541935038, 82.021853024283018],
    [289.7160796270216, 7475.1773049620442, 2605.8090646094506, 58.699, 53.850930256684649, 73.001213230889434, 70.039501333065644],
    [303.10517515598531, 8557.9710145127, 2607.891013384321, 59.778, 54.61078218737272, 89.422520393864275, 72.587022887453429],
    [295.2174077253606, 8969.4656488439978, 2538.1428571428569, 56.52, 53.603482634227817, 91.670822646540557, 71.592201788808865],
    [303.42205207338031, 8637.03703702648, 2576.7981220657275, 59.056, 55.71960227279537, 101.24475204287032, 74.374668941228521],
    [304.54697363593675, 8251.7482517674835, 2598.812969924812, 55.813, 52.062014052729012, 100.06248753526316, 69.550945450117581],
    [310.45663483767419, 10789.256198353085, 2791.2692307692305, 57.384, 58.463553886331233, 119.60218572208753, 55.646755721863549],
]

columns = [
    'CONCENTRIC_IMPULSE_Trial_Ns',
    'ECCENTRIC_BRAKING_RFD_Trial_N_s',
    'PEAK_CONCENTRIC_FORCE_Trial_N',
    'BODYMASS_RELATIVE_TAKEOFF_POWER_Trial_W_kg',
    'RSI_MODIFIED_Trial_RSI_mod',
    'ECCENTRIC_BRAKING_IMPULSE_Trial_Ns',
    'cmj_composite_score'
]

df = pd.DataFrame(data, columns=columns)

metrics = [
    'CONCENTRIC_IMPULSE_Trial_Ns',
    'ECCENTRIC_BRAKING_RFD_Trial_N_s',
    'PEAK_CONCENTRIC_FORCE_Trial_N',
    'BODYMASS_RELATIVE_TAKEOFF_POWER_Trial_W_kg',
    'RSI_MODIFIED_Trial_RSI_mod',
    'ECCENTRIC_BRAKING_IMPULSE_Trial_Ns'
]

weights = {
    'CONCENTRIC_IMPULSE_Trial_Ns': 0.2,
    'ECCENTRIC_BRAKING_RFD_Trial_N_s': 0.1,
    'PEAK_CONCENTRIC_FORCE_Trial_N': 0.2,
    'BODYMASS_RELATIVE_TAKEOFF_POWER_Trial_W_kg': 0.3,
    'RSI_MODIFIED_Trial_RSI_mod': 0.1,
    'ECCENTRIC_BRAKING_IMPULSE_Trial_Ns': 0.1
}

# Calculate mean and std for each metric across all trials
means = df[metrics].mean(axis=0)
stds = df[metrics].std(axis=0)

print('Mean for each metric:')
print(means)
print('\nStandard deviation for each metric:')
print(stds)

# Calculate z-scores for each trial and metric
z_scores = (df[metrics] - means) / stds
print('\nZ-scores for each trial and metric:')
print(z_scores.round(2))

# Calculate composite scores
composite_scores = z_scores.dot(pd.Series(weights))
print('\nComposite scores (recalculated):')
print(composite_scores.round(2))

print('\nOriginal composite scores:')
print(df['cmj_composite_score'].round(2).values)

# Show z-scores for the highest and lowest scoring trials
print('\nZ-scores for highest scoring trial:')
print(z_scores.iloc[composite_scores.idxmax()].round(2))
print('\nZ-scores for lowest scoring trial:')
print(z_scores.iloc[composite_scores.idxmin()].round(2)) 